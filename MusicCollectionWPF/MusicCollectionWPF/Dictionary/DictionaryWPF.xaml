<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
                    xmlns:my="clr-namespace:MusicCollectionWPF.Infra"
                    xmlns:myAP="clr-namespace:MusicCollectionWPF.UserControls.AlbumPresenter"
                    xmlns:inf="clr-namespace:MusicCollection.Fundation;assembly=MusicCollection"
                    xmlns:infra="clr-namespace:MusicCollection.Infra;assembly=MusicCollection"
                    xmlns:userinfra="clr-namespace:MusicCollectionWPF.UserControls"
                    xmlns:CustoPanel="clr-namespace:MusicCollectionWPF.CustoPanel"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:Behaviour="clr-namespace:MusicCollectionWPF.Infra.Behaviour"
                    xmlns:infraUser="clr-namespace:MusicCollectionWPF.UserControls"
                    xmlns:p="clr-namespace:PyBinding"  
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d" 
                    x:Class="MusicCollectionWPF.Infra.DictionaryWPF">
 <!--x:Name="GlobalDictionary"-->

    <ResourceDictionary.MergedDictionaries>



        <ResourceDictionary Source="IconDictionary.xaml" />
        <ResourceDictionary Source="GraphicDictionary.xaml" />
        <ResourceDictionary>




            <Style x:Key="ScrollBarLineButton2" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <ContentPresenter></ContentPresenter>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ScrollBarPageButton2" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ScrollBarThumb2" TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border  CornerRadius="5"  Background="{TemplateBinding Background}" BorderThickness="0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <ControlTemplate x:Key="VerticalScrollBar2" TargetType="{x:Type ScrollBar}">
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition MaxHeight="18"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition MaxHeight="18"/>
                    </Grid.RowDefinitions>
                    <Border Grid.RowSpan="3"  Background="{StaticResource Foreground}" CornerRadius="4" />
                    <RepeatButton Grid.Row="0"  Style="{StaticResource ScrollBarLineButton2}" Width="18" Command="ScrollBar.LineUpCommand">
                        <Image Source="{StaticResource sUp}"></Image>
                    </RepeatButton>
                    <Track  Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton2}" Command="ScrollBar.PageUpCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Background="{StaticResource IconBackgroundv}" Style="{StaticResource ScrollBarThumb2}" Margin="0,1,0,1"  BorderBrush="{StaticResource Background}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton  Style="{StaticResource ScrollBarPageButton2}" Command="ScrollBar.PageDownCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton Grid.Row="2"  Style="{StaticResource ScrollBarLineButton2}" Width="18" Command="ScrollBar.LineDownCommand">
                        <Image Source="{StaticResource sDown}"></Image>
                    </RepeatButton>
                </Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="HorizontalScrollBar2" TargetType="{x:Type ScrollBar}">
                <Grid >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MaxWidth="18"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MaxWidth="18"/>
                    </Grid.ColumnDefinitions>
                    <Border Grid.ColumnSpan="3" CornerRadius="5" Background="{StaticResource Foreground}" />
                    <RepeatButton  Grid.Column="0" Style="{StaticResource ScrollBarLineButton2}" Width="18" Command="ScrollBar.LineLeftCommand">
                        <Image Source="{StaticResource sLeft}"></Image>
                    </RepeatButton>
                    <Track  Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton2}" Command="ScrollBar.PageLeftCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb  Background="{StaticResource IconBackgroundh}" Style="{StaticResource ScrollBarThumb2}"  Margin="0,1,0,1" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarPageButton2}" Command="ScrollBar.PageRightCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton Grid.Column="2" Style="{StaticResource ScrollBarLineButton2}" Width="18" Command="ScrollBar.LineRightCommand">
                        <Image Source="{StaticResource sRight}"></Image>
                    </RepeatButton>
                </Grid>
            </ControlTemplate>

            <ContextMenu x:Key="VoidContextMenu" Width="0" Height="0" />

            <Style x:Key="ScrollBar2" TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <!--<Setter Property="ContextMenu" Value="x:Null"/>-->
                <Setter Property="ContextMenu" Value="{StaticResource VoidContextMenu}"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="Height" Value="18" />
                        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar2}" />
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="18"/>
                        <Setter Property="Height" Value="Auto" />
                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar2}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style  x:Key="CustoScrollviewer" TargetType="ScrollViewer">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition  />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"  Grid.Row="0" Grid.Column="0"  />

                                <ScrollBar Grid.Row="0" Grid.Column="1"  x:Name="PART_VerticalScrollBar" 
                     Value="{TemplateBinding VerticalOffset}" Style="{StaticResource ScrollBar2}"
                     Maximum="{TemplateBinding ScrollableHeight}"
                     ViewportSize="{TemplateBinding ViewportHeight}"
                     Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>


                                <ScrollBar x:Name="PART_HorizontalScrollBar"   
                     Orientation="Horizontal" Style="{StaticResource ScrollBar2}"
                     Grid.Row="1"
                     Grid.Column="0"
                     Value="{TemplateBinding HorizontalOffset}"
                     Maximum="{TemplateBinding ScrollableWidth}"
                     ViewportSize="{TemplateBinding ViewportWidth}"
                     Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="CustoListBox" TargetType="ListBox">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBox">
                            <ScrollViewer   Style="{StaticResource CustoScrollviewer}" x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0" >
                                <ItemsPresenter />
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="ProgressArrow" TargetType="ProgressBar">
                <Viewbox>
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup Name="CommonStates">
                            <VisualState Name="Determinate"/>

                            <VisualState Name="Indeterminate">
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Mov" Storyboard.TargetProperty="Angle" From="0" To="-359" Duration="00:00:1" RepeatBehavior="Forever" />
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Image Source="{StaticResource Working}" Height="200" Width="200"  >
                        <Image.RenderTransform>
                            <RotateTransform x:Name="Mov"   CenterX="100" CenterY="100"/>
                        </Image.RenderTransform>
                    </Image>
                </Viewbox>
            </ControlTemplate>

            <Style TargetType="my:CustoSlider" x:Key="GoldenSlider">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Foreground}"/>
                <Setter Property="TickLineBrush" Value="{StaticResource Background2}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="my:CustoSlider">
                            <!---->
                            <Canvas Margin="10,0" x:Name="Matrix" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"  VerticalAlignment="{TemplateBinding VerticalAlignment}" MinHeight="{TemplateBinding MinHeight}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"  MinWidth="{TemplateBinding MinWidth}" Background="Transparent" >
                                <Image Canvas.ZIndex="2"  x:Name="Cursor" MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinHeight}" Height="{TemplateBinding Height}" Width="{TemplateBinding Height}" Source="{StaticResource Disc1}">
                                    <Image.RenderTransform>
                                        <TranslateTransform x:Name="Transformer">
                                            <TranslateTransform.X>
                                                <p:PyBinding Script="Translate($[{TemplatedParent}.Value],$[{TemplatedParent}.Minimum],$[{TemplatedParent}.Maximum],$[Matrix.ActualWidth],$[Cursor.ActualWidth])" />
                                            </TranslateTransform.X>
                                        </TranslateTransform>
                                    </Image.RenderTransform>
                                </Image>
                                
                                <!--<Ellipse VerticalAlignment="Center" Canvas.Right="-15" Fill="{StaticResource Foreground}" Height="15"  Width="15"/>

                                <Ellipse VerticalAlignment="Center" Canvas.Left="-15" Fill="{StaticResource Foreground}" Height="15"  Width="15"/>-->

                                <!--<Line IsHitTestVisible="False" Canvas.ZIndex="1" Visibility="{p:PyBinding Script=BooleanToVisibility($[{TemplatedParent}.FillLineVisible])}" StrokeStartLineCap="Round" StrokeEndLineCap="Round" x:Name="ScrollingBar" StrokeThickness="{p:PyBinding  Script=$[{TemplatedParent}.LineThickness]*1.4}"  Stroke="{StaticResource Background2}" X1="0" X2="{p:PyBinding Script=Translate($[{TemplatedParent}.Value]\,$[{TemplatedParent}.Minimum]\,$[{TemplatedParent}.Maximum]\,$[Matrix.ActualWidth]\,0)}" Y1="{p:PyBinding Script=($[Matrix.ActualHeight]/2)}" Y2="{p:PyBinding Script=($[Matrix.ActualHeight]/2)}">
                                    <Line.Effect>
                                        <BlurEffect Radius="5"/>
                                    </Line.Effect>
                                </Line>-->

                            <Line IsHitTestVisible="False" Canvas.ZIndex="1" Visibility="{p:PyBinding Script=BooleanToVisibility($[{TemplatedParent}.FillLineVisible])}" StrokeStartLineCap="Round" StrokeEndLineCap="Round" x:Name="ScrollingBar" StrokeThickness="{p:PyBinding  Script=$[{TemplatedParent}.LineThickness]*1.4}"  Stroke="{TemplateBinding TickLineBrush}" X1="0" X2="{p:PyBinding Script=Translate($[{TemplatedParent}.Value]\,$[{TemplatedParent}.Minimum]\,$[{TemplatedParent}.Maximum]\,$[Matrix.ActualWidth]\,0)}" Y1="{p:PyBinding Script=($[Matrix.ActualHeight]/2)}" Y2="{p:PyBinding Script=($[Matrix.ActualHeight]/2)}">
                                    <Line.Effect>
                                        <BlurEffect Radius="5"/>
                                    </Line.Effect>
                                </Line>

                                <!--<Line Canvas.Top="{p:PyBinding Script=($[Matrix.ActualHeight]-$[{Self}.StrokeThickness])/2}" IsHitTestVisible="False" Canvas.ZIndex="1" Visibility="{p:PyBinding Script=BooleanToVisibility($[{TemplatedParent}.FillLineVisible])}" StrokeStartLineCap="Round" StrokeEndLineCap="Round" x:Name="ScrollingBar" StrokeThickness="{p:PyBinding  Script=$[{TemplatedParent}.LineThickness]*1.4}"  Stroke="{StaticResource Background2}" X1="0" X2="{p:PyBinding Script=Translate($[{TemplatedParent}.Value]\,$[{TemplatedParent}.Minimum]\,$[{TemplatedParent}.Maximum]\,$[Matrix.ActualWidth]\,0)}" Y1="0" Y2="0">
                                    <Line.Effect>
                                        <BlurEffect Radius="5"/>
                                    </Line.Effect>
                                </Line>-->

                                <!--Script=($[Matrix.ActualHeight-$[{Self}.StrokeThickness])/2-->


                                <Popup VerticalOffset="-17"  PlacementTarget="{Binding ElementName=Matrix}"  IsHitTestVisible="False"  AllowsTransparency="True" Placement="Relative"  x:Name="AutoToolTip" >
                                    <StackPanel x:Name="TTip" Orientation="Vertical">
                                        <Border CornerRadius="5" Background="Black" BorderBrush="Transparent">
                                            <TextBlock   Background="Transparent"  x:Name="AutoToolTipContentTextBox" FontWeight="Bold" Foreground="{StaticResource Foreground}" Padding="3">
                                            </TextBlock>
                                        </Border>
                                        <Image HorizontalAlignment="Center" Stretch="Fill" Height="6" Width="6" VerticalAlignment="Bottom" Source="{StaticResource TopTool}" />
                                    </StackPanel>
                                </Popup>

                                <Line x:Name="Bar" StrokeStartLineCap="Round" StrokeEndLineCap="Round" VerticalAlignment="Center"  Stroke="{TemplateBinding BorderBrush}"  StrokeThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=LineThickness}" X1="0" X2="{p:PyBinding Script=$[Matrix.ActualWidth]}" Y1="{p:PyBinding Script=($[Matrix.ActualHeight]/2)}" Y2="{p:PyBinding Script=($[Matrix.ActualHeight]/2)}">
                                </Line>
                                <!--<Border x:Name="Bar" Canvas.Top="{p:PyBinding Script=($[Matrix.ActualHeight]/2)}" Margin="{p:PyBinding  Script=Thickness(0\,-$[{TemplatedParent}.LineThickness]/2\,0\,0)}"  CornerRadius="20" VerticalAlignment="Center" HorizontalAlignment="Stretch"  Background="{StaticResource Foreground}" Width="{Binding ElementName=Matrix,Path=ActualWidth}"  Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=LineThickness}" >
                                </Border>-->

                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


          

            <Style x:Key="CustoToolTip2" TargetType="{x:Type ToolTip}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="DataContext" Value="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolTip}">
                            <Grid x:Name="TextTool" Opacity="0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Image Stretch="Fill" Height="6" Width="6" Grid.Column="2" Grid.Row="1" Visibility="{p:PyBinding UnsetValueIsInvalid=True, Script=BooleanToVisibility($[{TemplatedParent}.Placement]\=\=PlacementMode.Left)}" VerticalAlignment="Center" HorizontalAlignment="Left"  Source="{StaticResource LeftTool}" />

                                <Image Stretch="Fill" Height="6" Width="6" Grid.Column="0" Grid.Row="1" Visibility="{p:PyBinding UnsetValueIsInvalid=True, Script=BooleanToVisibility($[{TemplatedParent}.Placement]\=\=PlacementMode.Right)}" VerticalAlignment="Center" HorizontalAlignment="Right"  Source="{StaticResource RightTool}" />

                                <Image Stretch="Fill" Height="6" Width="6" Grid.Column="1" Grid.Row="0" Visibility="{p:PyBinding UnsetValueIsInvalid=True, Script=BooleanToVisibility($[{TemplatedParent}.Placement]\=\=PlacementMode.Bottom)}" VerticalAlignment="Bottom" HorizontalAlignment="Center"  Source="{StaticResource BottomTool}" />

                                <Image Stretch="Fill" Height="6" Width="6" Grid.Column="1" Grid.Row="2" Visibility="{p:PyBinding UnsetValueIsInvalid=True, Script=BooleanToVisibility($[{TemplatedParent}.Placement]\=\=PlacementMode.Top)}" VerticalAlignment="Top" HorizontalAlignment="Center"  Source="{StaticResource TopTool}" />


                                <Border Grid.Column="1" Grid.Row="1" BorderThickness="0" Padding="5" Opacity="0.8" Background="Black"  CornerRadius="10">
                                    <ContentPresenter TextBlock.FontWeight="Normal" TextBlock.FontSize="12" TextBlock.TextAlignment="Center" TextBlock.Foreground="{StaticResource Foreground}" />
                                </Border>

                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsOpen" Value="true">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard >
                                            <Storyboard TargetName="TextTool" TargetProperty="Opacity">
                                                <DoubleAnimation From="0" To="1" Duration="0:0:0.4"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard >
                                            <Storyboard TargetName="TextTool" TargetProperty="Opacity">
                                                <DoubleAnimation To="0" Duration="0:0:0.3"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                    <!--<Setter TargetName="TextTool" Property="Visibility" Value="Visible"/>-->
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>

                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalOffset">
                    <Setter.Value>
                        <p:PyBinding UnsetValueIsInvalid="True" Script="ToolVerOff($[{Self}.Placement],$[{Self}.PlacementTarget.ActualHeight],$[{Self}.ActualHeight])"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalOffset">
                    <Setter.Value>
                        <p:PyBinding UnsetValueIsInvalid="True" Script="ToolHorOff($[{Self}.Placement],$[{Self}.PlacementTarget.ActualWidth],$[{Self}.ActualWidth])"/>
                    </Setter.Value>
                </Setter>

            </Style>

            <Style x:Key="CMenuItem" TargetType="{x:Type MenuItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                <Setter Property="TextBox.Foreground" Value="{StaticResource Foreground}"/>

                <Setter Property="CommandTarget" >
                    <Setter.Value>
                        <Binding RelativeSource="{RelativeSource AncestorType=ContextMenu}" Path="PlacementTarget"/>
                    </Setter.Value>
                </Setter>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}" >
                            <Border CornerRadius="10" x:Name="Border"  Background="Transparent" BorderBrush="Transparent" >
                                <Grid >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                        <ColumnDefinition x:Name="Col3" Width="14"/>
                                    </Grid.ColumnDefinitions>

                                    <!-- ContentPresenter to show an Icon if needed -->
                                    <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                                    <!-- Glyph is a checkmark if needed for a checkable menu -->
                                    <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                        <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                    </Grid>

                                    <!-- Content for the menu text etc -->
                                    <ContentPresenter TextBlock.Foreground="{StaticResource Foreground}" Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header"/>

                                    <!-- Content for the menu IGT -->
                                    <ContentPresenter Grid.Column="2" Margin="8,1,8,1" x:Name="IGTHost" ContentSource="InputGestureText" VerticalAlignment="Center"/>

                                    <!-- Arrow drawn path which points to the next level of the menu -->
                                    <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                        <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                    </Grid>

                                    <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                    <Popup AllowsTransparency="True" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">

                                        <Border Padding="4"  CornerRadius="10" x:Name="SubMenuBorder" Opacity="0.8" Background="Black" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" BorderThickness="1" >
                                            <Grid  x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                                <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                            </Grid>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>


                            <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                            <ControlTemplate.Triggers>
                                <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                    <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                                    <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>

                                <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>

                                <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>

                                <!-- Role = SubMenuItem : this is a child menu item which has children-->
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                                </Trigger>

                                <!-- If no Icon is present the we collapse the Icon Content -->
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                <!-- The GlyphPanel contains the CheckMark -->
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="LightGray"/>
                                    <Setter Property="TextBox.Foreground" Value="LightGray" TargetName="HeaderHost" />
                                    <Setter Property="FontStyle" Value="Italic"></Setter>
                                    <!--<Setter Property="BorderBrush" Value="{StaticResource MenuBackgroundBrush}"></Setter>-->
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="true">
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                    <Setter Property="TextBox.Foreground" Value="{StaticResource Foreground}" TargetName="HeaderHost" />
                                    <Setter Property="FontStyle" Value="Normal"></Setter>
                                </Trigger>


                                <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter Property="Background" Value="{StaticResource Foreground}" TargetName="Border"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="TextBox.Foreground" Value="Black"/>
                                    <Setter Property="TextBox.Foreground" Value="Black" TargetName="HeaderHost" />
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CMenu" TargetType="{x:Type ContextMenu}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="DataContext" Value="{Binding RelativeSource={RelativeSource self}, Path=PlacementTarget.DataContext}"/>
                <Setter Property="Background" Value="Black"/>
                <Setter Property="Opacity" Value="0.8"/>
                <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource CMenuItem}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border Padding="4"  Background="Black" BorderBrush="{StaticResource Foreground}" BorderThickness="1" CornerRadius="10">
                                <StackPanel ClipToBounds="True" IsItemsHost="True" Orientation="Vertical"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="IconMenuItem" TargetType="{x:Type MenuItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                <Setter Property="TextBox.Foreground" Value="{StaticResource Foreground}"/>

                <Setter Property="CommandTarget" >
                    <Setter.Value>
                        <Binding RelativeSource="{RelativeSource AncestorType=ContextMenu}" Path="PlacementTarget"/>
                    </Setter.Value>
                </Setter>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}" >
                            <Border CornerRadius="10" x:Name="Border"  Background="Transparent" BorderBrush="Transparent" >
                                <Grid >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                        <ColumnDefinition x:Name="Col3" Width="14"/>
                                    </Grid.ColumnDefinitions>

                                    <!-- ContentPresenter to show an Icon if needed -->
                                    <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon">
                                    </ContentPresenter>

                                    <!-- Glyph is a checkmark if needed for a checkable menu -->
                                    <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                        <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                    </Grid>


                                    <!-- Arrow drawn path which points to the next level of the menu -->
                                    <Grid Grid.Column="1" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                        <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                    </Grid>

                                    <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                    <Popup AllowsTransparency="True" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">

                                        <Border Padding="4"  CornerRadius="10" x:Name="SubMenuBorder" Opacity="0.8" Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" BorderThickness="1" >
                                            <Grid  x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                                <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                            </Grid>
                                        </Border>
                                    </Popup>
                                </Grid>
                                <Border.ToolTip>
                                    <ToolTip TextBlock.Foreground="{StaticResource Foreground}" TextBlock.FontSize="14" Style="{StaticResource CustoToolTip2}" Placement="Left">
                                        <ContentPresenter x:Name="HeaderHost" ContentSource="Header"/>
                                    </ToolTip>
                                </Border.ToolTip>
                            </Border>


                            <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                            <ControlTemplate.Triggers>
                                <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                    <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                                    <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>

                                <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>

                                <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>

                                <!-- Role = SubMenuItem : this is a child menu item which has children-->
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                                </Trigger>

                                <!-- If no Icon is present the we collapse the Icon Content -->
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                <!-- The GlyphPanel contains the CheckMark -->
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="LightGray"/>
                                    <Setter Property="FontStyle" Value="Italic"></Setter>
                                    <!--<Setter Property="BorderBrush" Value="{StaticResource MenuBackgroundBrush}"></Setter>-->
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="true">
                                    <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                                    <Setter Property="FontStyle" Value="Normal"></Setter>
                                </Trigger>


                                <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter Property="Background" Value="{StaticResource Foreground}" TargetName="Border"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="TextBox.Foreground" Value="Black"/>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>


            </Style>

            <Style x:Key="IconContextMenu" TargetType="{x:Type ContextMenu}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="DataContext" Value="{Binding RelativeSource={RelativeSource self}, Path=PlacementTarget.DataContext}"/>
                <Setter Property="Background" Value="Black"/>
                <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource IconMenuItem}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Placement" Value="Right"/>
                <Setter Property="VerticalOffset" Value="{p:PyBinding UnsetValueIsInvalid=True, Script=$[{Self}.PlacementTarget.ActualHeight]/2-$[{Self}.ActualHeight]/2}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border x:Name="MyB" Opacity="0" Padding="4"  BorderThickness="0" CornerRadius="10">
                                <Border.Background>
                                    <SolidColorBrush Opacity="0.85" Color="Black"/>
                                </Border.Background>
                                <StackPanel ClipToBounds="True" IsItemsHost="True" Orientation="Vertical"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsOpen" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard TargetName="MyB" TargetProperty="Opacity">
                                                <DoubleAnimation To="1" Duration="0:0:0.6" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <!--<EventSetter Event="Opened" Handler="OpenedMenuContext"/>-->
            </Style>

            <ContextMenu x:Key="TextBoxContextMenu" Background="{StaticResource Background}" Style="{StaticResource CMenu}">
                <MenuItem Command="ApplicationCommands.Copy">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Copy2}" Width="30" Height="30"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="ApplicationCommands.Cut">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Split}" Width="30" Height="30"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="ApplicationCommands.Paste">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Paste}" Width="30" Height="30"/>
                    </MenuItem.Icon>
                </MenuItem>
            </ContextMenu>

            <ContextMenu x:Key="TextBoxContextMenu2" Background="{StaticResource Background}" Style="{StaticResource CMenu}" >
                <MenuItem Header="Copy" FontWeight="8" Command="ApplicationCommands.Copy">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Copy2}" Width="20" Height="20"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem  Header="Cut" FontWeight="8"  Command="ApplicationCommands.Cut">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Split}" Width="20" Height="20"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem  Header="Paste"  FontWeight="8" Command="ApplicationCommands.Paste">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Paste}" Width="20" Height="20"/>
                    </MenuItem.Icon>
                </MenuItem>
            </ContextMenu>


            <Style x:Key="Editor" TargetType="{x:Type TextBox}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{StaticResource Foreground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Background}"/>
                <Setter Property="SelectionBrush" Value="{StaticResource Background}"/>
                <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>

            <Style x:Key="AscedantDescendantButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Image x:Name="ContentObject" Source="{StaticResource Up}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="False">
                                    <Trigger.Setters>
                                        <Setter TargetName="ContentObject" Property="Source" Value="{StaticResource Down}"/>
                                    </Trigger.Setters>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
    
            <ControlTemplate x:Key="MusicButton" TargetType="ToggleButton">
                <Grid>
                    <ContentPresenter Content="{TemplateBinding Content}"/>
                    <Image x:Name="DisplayIcon" Source="{StaticResource Play}" Opacity="0" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </Grid>
                <ControlTemplate.Triggers>

                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="DisplayIcon" Property="Source" Value="{StaticResource Pause}"/>
                    </Trigger>

                    <EventTrigger RoutedEvent="ToggleButton.Click">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard TargetName="DisplayIcon" TargetProperty="Opacity">
                                    <DoubleAnimation From="0" To="1" Duration="0:0:1" AutoReverse="True"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>


                    <EventTrigger RoutedEvent="MouseEnter">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard TargetName="DisplayIcon" TargetProperty="Opacity">
                                    <DoubleAnimation From="0" To="1" Duration="0:0:1" AutoReverse="True"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>


                </ControlTemplate.Triggers>
            </ControlTemplate>



            <ControlTemplate x:Key="CustomButton" TargetType="ToggleButton">
                <Grid x:Name="C" Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Content="{TemplateBinding Content}"  />
                    <Image Grid.Column="1" RenderTransformOrigin="0.5,0.5"  x:Name="Fleche" Source="{StaticResource BackArrow}" HorizontalAlignment="Right"  VerticalAlignment="Bottom">
                        <Image.RenderTransform>
                            <ScaleTransform x:Name="Magn" />
                        </Image.RenderTransform>
                    </Image>

                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter TargetName="Fleche" Property="Opacity" Value="0.4"/>
                    </Trigger>

                    <Trigger Property="IsChecked" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard >
                                <Storyboard>
                                    <DoubleAnimation  To="0.8"  Duration="0:0:0.4" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleX"/>
                                    <DoubleAnimation To="0.8"  Duration="0:0:0.4" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleY"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard >
                                <Storyboard>
                                    <DoubleAnimation  To="1"  Duration="0:0:0.4" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleX"/>
                                    <DoubleAnimation To="1"  Duration="0:0:0.4" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleY"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>

                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="CustomButtonStyle" TargetType="ToggleButton">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <ContentPresenter x:Name="ContentObject" Content="{TemplateBinding Content}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                            </ContentPresenter>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <DataTemplate x:Key="FallBackImage2">
                <Viewbox my:MouseOverArdorner.AttachedAdorner="{StaticResource MouseOverArdornerAlbumInfo2}">
                    <Grid Height="100" Width="100" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30*" />
                            <ColumnDefinition Width="36*" />
                            <ColumnDefinition Width="30*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="27*" />
                            <RowDefinition Height="10*" />
                            <RowDefinition Height="20*" />
                            <RowDefinition Height="10*" />
                            <RowDefinition Height="27*" />
                        </Grid.RowDefinitions>
                        <Image  Source="{StaticResource UnknownCD}" Grid.RowSpan="5" Grid.ColumnSpan="3">
                        </Image>

                        <Viewbox Grid.Column="1" Grid.Row="1" VerticalAlignment="Bottom">
                            <Label HorizontalAlignment="Center" MaxWidth="200" >
                                <TextBlock TextWrapping="Wrap" FontWeight="Bold" Text="{Binding Path=Author}" TextAlignment="Center" />
                            </Label>
                        </Viewbox>
                        <!--Text="{Binding Path=(inf:IAlbum.Author)}"-->

                        <!--Text="{Binding Path=(inf:IAlbum.Name)}"-->
                        <Viewbox Grid.Column="1" Grid.Row="3" VerticalAlignment="Top">
                            <Label HorizontalAlignment="Center" MaxWidth="200" >
                                <TextBlock TextWrapping="Wrap" FontWeight="Bold" Text="{Binding Path=Name}" TextAlignment="Center" />
                            </Label>
                        </Viewbox>

                    </Grid>
                </Viewbox>
            </DataTemplate>


            <DataTemplate x:Key="FallBackImage3">
                <Viewbox my:MouseOverArdorner.AttachedAdorner="{StaticResource MouseOverArdornerAlbumInfo4}">
                    <Grid Height="100" Width="100" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30*" />
                            <ColumnDefinition Width="36*" />
                            <ColumnDefinition Width="30*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="27*" />
                            <RowDefinition Height="10*" />
                            <RowDefinition Height="20*" />
                            <RowDefinition Height="10*" />
                            <RowDefinition Height="27*" />
                        </Grid.RowDefinitions>
                        <Image  Source="{StaticResource UnknownCD}" Grid.RowSpan="5" Grid.ColumnSpan="3">
                        </Image>

                        <Viewbox Grid.Column="1" Grid.Row="1" VerticalAlignment="Bottom">
                            <Label HorizontalAlignment="Center" MaxWidth="200" >
                                <TextBlock TextWrapping="Wrap" FontWeight="Bold" Text="{Binding Path=Author}" TextAlignment="Center" />
                            </Label>
                        </Viewbox>
                        <!--Text="{Binding Path=(inf:IAlbum.Author)}"-->

                        <!--Text="{Binding Path=(inf:IAlbum.Name)}"-->
                        <Viewbox Grid.Column="1" Grid.Row="3" VerticalAlignment="Top">
                            <Label HorizontalAlignment="Center" MaxWidth="200" >
                                <TextBlock TextWrapping="Wrap" FontWeight="Bold" Text="{Binding Path=Name}" TextAlignment="Center" />
                            </Label>
                        </Viewbox>

                    </Grid>
                </Viewbox>
            </DataTemplate>



            <Style x:Key="AlbumImagePresenter" TargetType="ContentControl">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <!--<Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="15" ShadowDepth="30" Opacity="0.75" />
                    </Setter.Value>
                </Setter>-->
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image my:MouseOverArdorner.AttachedAdorner="{StaticResource MouseOverArdornerAlbumInfo}" Stretch="Uniform" Source="{Binding Path=CoverImage, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content.CoverImage, Mode=OneWay}" Value="{x:Null}">
                        <DataTrigger.Setters>
                            <Setter Property="ContentTemplate" Value="{StaticResource FallBackImage2}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="AlbumMultiImagePresenter" TargetType="ContentControl">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image x:Name="ImagePresenter" Stretch="Uniform"  >
                                <Image.Source>
                                    <p:PyBinding Script="MaxImage($[.Images/])" UnsetValueIsInvalid="True"  FallbackValue="{StaticResource UnknownCD}"/>
                                </Image.Source>
                                <!--<Image x:Name="ImagePresenter" Stretch="Uniform"  Source="{Binding Path=Images/, Converter={x:Static my:AlbumCoverConverterMax.Converter}, ConverterParameter={StaticResource UnknownCD}}">-->
                            </Image>
                        </DataTemplate>

                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content.CoverImage, Mode=OneWay}" Value="{x:Null}">
                        <DataTrigger.Setters>
                            <Setter Property="ContentTemplate" Value="{StaticResource FallBackImage2}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <DataTemplate x:Key="AlbumToolTipShadow">
                <Grid x:Name="AlbInf" Opacity="0" Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Adorner}}, Path=AdornedElement.ActualHeight}" Width="{p:PyBinding Script=$[{FindAncestor[System.Windows.Documents.Adorner]}.AdornedElement.ActualWidth]}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Rectangle  Opacity="0.8" Grid.ColumnSpan="1" Grid.RowSpan="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="Black"/>
                    <Viewbox Grid.Column="0" Grid.Row="0" >
                        <TextBlock Margin="5" FontStyle="Italic"  TextAlignment="Center" MaxWidth="100" Foreground="White" TextWrapping="Wrap" Text="{Binding Path=Author}"/>
                    </Viewbox>
                    <Viewbox Grid.Column="0" Grid.Row="1" >
                        <TextBlock Margin="5" FontWeight="Bold"  TextAlignment="Center" Foreground="White" MaxWidth="100" TextWrapping="Wrap" Text="{Binding Path=Name}"/>
                    </Viewbox>
                </Grid>
                <DataTemplate.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                    <DoubleAnimation To="0.8" Duration="0:0:0.6" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>

                    <EventTrigger RoutedEvent="MouseLeave">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                    <DoubleAnimation To="0" Duration="0:0:0.6" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="AlbumToolTipShadow2">
                <Grid x:Name="AlbInf" Opacity="0" Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Adorner}}, Path=AdornedElement.ActualHeight}" Width="{p:PyBinding Script=$[{FindAncestor[System.Windows.Documents.Adorner]}.AdornedElement.ActualWidth]}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Rectangle  Opacity="0.8" Grid.ColumnSpan="1" Grid.RowSpan="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="Black"/>
                    <Viewbox Grid.Column="0" Grid.Row="0" >
                        <TextBlock Margin="5" FontStyle="Italic"  TextAlignment="Center" MaxWidth="100" Foreground="White" TextWrapping="Wrap" Text="{Binding Path=Author}"/>
                    </Viewbox>
                    <Viewbox Grid.Column="0" Grid.Row="1" >
                        <TextBlock Margin="5" FontWeight="Bold"  TextAlignment="Center" Foreground="White" MaxWidth="100" TextWrapping="Wrap" Text="{Binding Path=Name}"/>
                    </Viewbox>
                </Grid>
                <DataTemplate.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                    <DoubleAnimation BeginTime="0:0:1" To="0.8" Duration="0:0:0.6" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>

                    <EventTrigger RoutedEvent="MouseLeave">
                        <EventTrigger.Actions>
                            <BeginStoryboard>
                                <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                    <DoubleAnimation To="0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger.Actions>
                    </EventTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <my:MouseOverArdornerInfo Template="{StaticResource AlbumToolTipShadow}" x:Key="MouseOverArdornerAlbumInfo" DelayClose="1000"/>
            <my:MouseOverArdornerInfo Template="{StaticResource AlbumToolTipShadow2}" x:Key="MouseOverArdornerAlbumInfo3" DelayClose="2000"/>

            <my:MouseOverArdornerInfo x:Key="MouseOverArdornerAlbumInfo2" DelayClose="1000">
                <my:MouseOverArdornerInfo.Template>
                    <DataTemplate >
                        <Viewbox Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Adorner}}, Path=AdornedElement.ActualHeight}" Width="{p:PyBinding Script=$[{FindAncestor[System.Windows.Documents.Adorner]}.AdornedElement.ActualWidth]}">
                            <Grid x:Name="AlbInf" Opacity="0" Height="100" Width="100" >
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="5*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Path VerticalAlignment="Stretch"  HorizontalAlignment="Stretch" Grid.ColumnSpan="3" Grid.RowSpan="2">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <EllipseGeometry Center="50,50" RadiusX="45" RadiusY="45"></EllipseGeometry>
                                            <EllipseGeometry Center="50,50" RadiusX="10" RadiusY="10"></EllipseGeometry>
                                        </GeometryGroup>
                                    </Path.Data>
                                    <Path.Fill>
                                        <SolidColorBrush Color="Black" Opacity="0.8" />
                                    </Path.Fill>
                                </Path>
                                <Viewbox Grid.Column="1" Grid.Row="0" >
                                    <TextBlock Margin="5" FontStyle="Italic"  TextAlignment="Center" MaxWidth="100" Foreground="White" TextWrapping="Wrap" Text="{Binding Path=Author}"/>
                                </Viewbox>
                                <Viewbox Grid.Column="1" Grid.Row="1" >
                                    <TextBlock Margin="5" FontWeight="Bold"  TextAlignment="Center" Foreground="White" MaxWidth="100" TextWrapping="Wrap" Text="{Binding Path=Name}"/>
                                </Viewbox>
                            </Grid>
                        </Viewbox>
                        <DataTemplate.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                            <DoubleAnimation To="0.8" Duration="0:0:0.6" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>

                            <EventTrigger RoutedEvent="MouseLeave">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                            <DoubleAnimation To="0" Duration="0:0:0.6" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>

                        </DataTemplate.Triggers>
                    </DataTemplate>
                </my:MouseOverArdornerInfo.Template>
            </my:MouseOverArdornerInfo>

            <my:MouseOverArdornerInfo x:Key="MouseOverArdornerAlbumInfo4" DelayClose="1000">
                <my:MouseOverArdornerInfo.Template>
                    <DataTemplate >
                        <Viewbox Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Adorner}}, Path=AdornedElement.ActualHeight}" Width="{p:PyBinding Script=$[{FindAncestor[System.Windows.Documents.Adorner]}.AdornedElement.ActualWidth]}">
                            <Grid x:Name="AlbInf" Opacity="0" Height="100" Width="100" >
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="5*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Path VerticalAlignment="Stretch"  HorizontalAlignment="Stretch" Grid.ColumnSpan="3" Grid.RowSpan="2">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <EllipseGeometry Center="50,50" RadiusX="45" RadiusY="45"></EllipseGeometry>
                                            <EllipseGeometry Center="50,50" RadiusX="10" RadiusY="10"></EllipseGeometry>
                                        </GeometryGroup>
                                    </Path.Data>
                                    <Path.Fill>
                                        <SolidColorBrush Color="Black" Opacity="0.8" />
                                    </Path.Fill>
                                </Path>
                                <Viewbox Grid.Column="1" Grid.Row="0" >
                                    <TextBlock Margin="5" FontStyle="Italic"  TextAlignment="Center" MaxWidth="100" Foreground="White" TextWrapping="Wrap" Text="{Binding Path=Author}"/>
                                </Viewbox>
                                <Viewbox Grid.Column="1" Grid.Row="1" >
                                    <TextBlock Margin="5" FontWeight="Bold"  TextAlignment="Center" Foreground="White" MaxWidth="100" TextWrapping="Wrap" Text="{Binding Path=Name}"/>
                                </Viewbox>
                            </Grid>
                        </Viewbox>
                        <DataTemplate.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                            <DoubleAnimation BeginTime="0:0:1" To="0.8" Duration="0:0:0.6" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>

                            <EventTrigger RoutedEvent="MouseLeave">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard TargetName="AlbInf" TargetProperty="Opacity">
                                            <DoubleAnimation To="0" Duration="0:0:0.3" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>

                        </DataTemplate.Triggers>
                    </DataTemplate>
                </my:MouseOverArdornerInfo.Template>
            </my:MouseOverArdornerInfo>



            <Style x:Key="IconButton" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Border" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" CornerRadius="20">
                                <ContentPresenter RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="ContentObject" Content="{TemplateBinding Content}" >
                                    <ContentPresenter.RenderTransform>
                                        <ScaleTransform x:Name="Magn" />
                                        <!--CenterX="{p:PyBinding UnsetValueIsInvalid=True, Script=$[Border.ActualWidth]/2}" CenterY="{p:PyBinding  UnsetValueIsInvalid=True, Script=$[Border.ActualHeight]/2}"/>-->
                                    </ContentPresenter.RenderTransform>
                                </ContentPresenter>
                                <Border.Background>
                                    <ImageBrush x:Name="BG" ImageSource="../Graphic/Clear Wood.jpg" Opacity="0"/>
                                </Border.Background>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="ContentObject" Property="Opacity" Value="0.4"/>
                                </Trigger>

                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation To="0.5"  Duration="0:0:0.2" Storyboard.TargetName="BG" Storyboard.TargetProperty="Opacity"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation To="0"  Duration="0:0:0.2" Storyboard.TargetName="BG" Storyboard.TargetProperty="Opacity"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation AutoReverse="True" To="0.8"  Duration="0:0:0.2" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleX"/>
                                                <DoubleAnimation AutoReverse="True"  To="0.8"  Duration="0:0:0.2" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleY"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>

            </Style>


            <Style x:Key="SimpleIconButton" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">

                            <ContentPresenter RenderTransformOrigin="0.5,0.5" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="ContentObject" Content="{TemplateBinding Content}" >
                                <ContentPresenter.RenderTransform>
                                    <ScaleTransform x:Name="Magn" />
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="ContentObject" Property="Opacity" Value="0.4"/>
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation AutoReverse="True" To="0.8"  Duration="0:0:0.2" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleX"/>
                                                <DoubleAnimation AutoReverse="True"  To="0.8"  Duration="0:0:0.2" Storyboard.TargetName="Magn" Storyboard.TargetProperty="ScaleY"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>

            </Style>

            <Style x:Key="WindowT" TargetType="{x:Type my:CustomWindow}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="WindowStyle" Value="None" />
                <Setter Property="ResizeMode" Value="NoResize" />
                <Setter Property="ShowInTaskbar" Value="False"/>
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="Icon" Value="..\music2.ico"/>
                <Setter Property="CornerRadius" Value="10"/>
                <Setter Property="BorderBrush" Value="{StaticResource Foreground}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">


                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type my:CustomWindow}">
                            <Border ClipToBounds="True" x:Name="MyWindow"  CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <!--MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinWidth}"  -->
                                <Border.Height>
                                    <p:PyBinding Script="Double.NaN if ($[{TemplatedParent}.SizeToContent]==SizeToContent.WidthAndHeight or $[{TemplatedParent}.SizeToContent]==SizeToContent.Height) else $[{TemplatedParent}.Height]"/>
                                </Border.Height>
                                <Border.Width>
                                    <p:PyBinding Script="Double.NaN if ($[{TemplatedParent}.SizeToContent]==SizeToContent.WidthAndHeight or $[{TemplatedParent}.SizeToContent]==SizeToContent.Width) else $[{TemplatedParent}.Width]"/>
                                </Border.Width>
                                <Border.Background>
                                    <SolidColorBrush Color="Black" Opacity="0.9"/>
                                </Border.Background>
                            
                                <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  ClipToBounds="True" x:Name="MainWindow">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="30"/>
                                        <RowDefinition>
                                            <RowDefinition.Height>
                                                <p:PyBinding Script=" GridLength(1, GridUnitType.Auto) if ($[{TemplatedParent}.SizeToContent]==SizeToContent.WidthAndHeight or $[{TemplatedParent}.SizeToContent]==SizeToContent.Height) else GridLength(1, GridUnitType.Star)"/>                                               
                                            </RowDefinition.Height>
                                        </RowDefinition>
                                    </Grid.RowDefinitions>
 
                                    <Grid Height="30" Background="Transparent">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="20"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="30"/>
                                            <ColumnDefinition Width="30"/>
                                            <ColumnDefinition Width="10"/>
                                        </Grid.ColumnDefinitions>

                                        <Label x:Name="TitleBarPart" VerticalAlignment="Center" Grid.Column="1" HorizontalAlignment="Stretch" Content="{TemplateBinding Title}" Foreground="{StaticResource Foreground}" FontWeight="Bold" />

                                        <Button HorizontalAlignment="Center" Style="{StaticResource SimpleIconButton}" x:Name="Minimize" Grid.Column="2"  Height="20" Width="30"  VerticalAlignment="Center">
                                            <Image Width="20" Height="20" Source="{StaticResource Minize}"/>
                                        </Button>

                                        <Button HorizontalAlignment="Center" Style="{StaticResource SimpleIconButton}" x:Name="CloseButton" Grid.Column="3" Height="30" Width="30" VerticalAlignment="Center">
                                            <Image  Width="30" Height="30" Source="{StaticResource ThinClose}"/>                                 
                                        </Button>

                                    </Grid>

                                    <AdornerDecorator Grid.Row="1">
                                        <ContentPresenter ClipToBounds="True" x:Name="CP"  Content="{TemplateBinding Content}" Opacity="1"/>
                                    </AdornerDecorator>

                                </Grid>
                            </Border>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <infra:ObjectState x:Key="Broken">FileNotAvailable</infra:ObjectState>
            <infra:ObjectState x:Key="Locked">UnderEdit</infra:ObjectState>

            <Style x:Key="ChromelessToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="ContentObject" CornerRadius="10">
                                <ContentPresenter   Content="{TemplateBinding Content}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"   VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                                <Border.Background>
                                    <ImageBrush x:Name="BG" ImageSource="../Graphic/Clear Wood.jpg" Opacity="0"/>
                                </Border.Background>
                            </Border>
                            <ControlTemplate.Triggers>

                                <Trigger Property="IsChecked" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Name="CheckedAnimation" >
                                            <Storyboard >
                                                <DoubleAnimation To="1"  Duration="0:0:0.1" Storyboard.TargetName="BG" Storyboard.TargetProperty="Opacity"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions  >
                                        <StopStoryboard BeginStoryboardName="CheckedAnimation"/>
                                    </Trigger.ExitActions>
                                </Trigger>

                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Name="OverAnimation">
                                            <Storyboard  >
                                                <DoubleAnimation To="0.4"  Duration="0:0:0.1" Storyboard.TargetName="BG" Storyboard.TargetProperty="Opacity"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="OverAnimation"/>
                                    </Trigger.ExitActions>
                                </Trigger>

                            </ControlTemplate.Triggers>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <ControlTemplate x:Key="StarSystem" TargetType="my:CustoStarSlider">
                <Viewbox Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}" Width="{p:PyBinding Script=$[{TemplatedParent}.Height]*5}">
                    <StackPanel x:Name="Stars" Orientation="Horizontal" Height="50" Width="250" >
                        <Image x:Name="S1" Height="50" Width="50" Source="{StaticResource Nothing}"/>
                        <Image x:Name="S2" Height="50" Width="50" Source="{StaticResource Nothing}"/>
                        <Image x:Name="S3" Height="50" Width="50" Source="{StaticResource Nothing}"/>
                        <Image x:Name="S4" Height="50" Width="50" Source="{StaticResource Nothing}"/>
                        <Image x:Name="S5" Height="50" Width="50" Source="{StaticResource Nothing}"/>
                    </StackPanel>
                </Viewbox>
                <ControlTemplate.Triggers>
                    <DataTrigger Value="True" Binding="{p:PyBinding Script=IsMax($[{Self}.Value]\,$[{Self}.Minimum]\,$[{Self}.Maximum]\,1\,5)}">
                        <DataTrigger.Setters>
                            <Setter TargetName="S1" Property="Source" Value="{StaticResource Star}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                    <DataTrigger Value="True" Binding="{p:PyBinding Script=IsMax($[{Self}.Value]\,$[{Self}.Minimum]\,$[{Self}.Maximum]\,2\,5)}">
                        <DataTrigger.Setters>
                            <Setter TargetName="S2" Property="Source" Value="{StaticResource Star}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                    <DataTrigger Value="True" Binding="{p:PyBinding Script=IsMax($[{Self}.Value]\,$[{Self}.Minimum]\,$[{Self}.Maximum]\,3\,5)}">
                        <DataTrigger.Setters>
                            <Setter TargetName="S3" Property="Source" Value="{StaticResource Star}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                    <DataTrigger Value="True" Binding="{p:PyBinding Script=IsMax($[{Self}.Value]\,$[{Self}.Minimum]\,$[{Self}.Maximum]\,4\,5)}">
                        <DataTrigger.Setters>
                            <Setter TargetName="S4" Property="Source" Value="{StaticResource Star}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                    <DataTrigger Value="True" Binding="{p:PyBinding Script=IsMax($[{Self}.Value]\,$[{Self}.Minimum]\,$[{Self}.Maximum]\,5\,5)}">
                        <DataTrigger.Setters>
                            <Setter TargetName="S5" Property="Source" Value="{StaticResource Star}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="ReverseText2" TargetType="TextBox">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="SelectionBrush" Value="{StaticResource Background}"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}"/>
            </Style>

            <Style x:Key="Standard" TargetType="TextBox">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="IsReadOnly" Value="True"/>
                <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="SelectionBrush" Value="{StaticResource Foreground}"/>
                <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}"/>
            </Style>

            <Style x:Key="CustoCheckBok" TargetType="{x:Type CheckBox}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <StackPanel Orientation="Horizontal" Width="{TemplateBinding Width}">                               
                                <Image VerticalAlignment="Center" Source="{StaticResource Box}" x:Name="Button" Height="25" Width="25"/>
                                <ContentPresenter VerticalAlignment="Center"  ></ContentPresenter>
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="Button" Property="Source" Value="{StaticResource Checked}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter TargetName="Button" Property="Source" Value="{StaticResource UnknownBox}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Button" Property="Source" Value="{StaticResource UnableBox}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CustoGroupBox" TargetType="GroupBox">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="3"/>
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <StackPanel     Orientation="Horizontal">
                                <TextBlock  Text="{Binding}" Foreground="{StaticResource Foreground}" FontWeight="Bold" HorizontalAlignment="Center"/>
                                <Image  Height="20" x:Name="Warning"  Width="20" Source="{StaticResource Attention}" Visibility="{p:PyBinding Script=BooleanToHidden($[{FindAncestor[System.Windows.Controls.GroupBox]}.(Validation.HasError)])}"/>
                            </StackPanel>
                        </DataTemplate>
                    </Setter.Value>

                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GroupBox">
                            <Grid x:Name="Total" Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" MinHeight="{TemplateBinding MinHeight}" MinWidth="{TemplateBinding MinWidth}" MaxHeight="{TemplateBinding MaxHeight}" MaxWidth="{TemplateBinding MaxWidth}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="5" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="10" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter Grid.Column="1"  ClipToBounds="False" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"  x:Name="Header"  Grid.Row="0"   ContentSource="Header" RecognizesAccessKey="True" />

                                <Path Data="{p:PyBinding UnsetValueIsInvalid=True,Script=GeometryHelper.BorderFromPoints($[Header.ActualWidth]\,$[Header.ActualHeight]\,$[Total.ActualWidth]\,$[Total.ActualHeight]\,20)}" Stroke="{StaticResource Foreground}" Grid.ColumnSpan="3" Grid.RowSpan="3" StrokeThickness="3"  >
                                </Path>

                                <ContentPresenter MinWidth="50" MinHeight="20"  Grid.Column="1"  Margin="0,5,0,10"  HorizontalAlignment="Stretch" Grid.Row="1"  x:Name="Body"  />

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="CustoComboBox" TargetType="{x:Type ComboBox}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
                <Setter Property="Background" Value="{StaticResource Foreground}" />
                <Setter Property="MinHeight" Value="20" />

                <Setter Property="ItemContainerStyle">
                    <Setter.Value>

                        <Style TargetType="{x:Type ComboBoxItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                        <!--Padding="4,4" -->
                                        <Border Padding="10,2" Height="{TemplateBinding Height}"  CornerRadius="10" x:Name="BP" Background="Transparent">
                                            <ContentPresenter VerticalAlignment="Center" />
                                        </Border>

                                        <ControlTemplate.Triggers>

                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter TargetName="BP" Property="Background" Value="Black"/>
                                                <Setter TargetName="BP" Property="TextBlock.Foreground" Value="{StaticResource Foreground}"/>
                                            </Trigger>

                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>



                <Setter Property="Template">
                    <Setter.Value>

                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Border Height="{TemplateBinding Height}" CornerRadius="10" Background="{TemplateBinding Background}">
                                <Grid >
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup x:Name="CommonStates">
                                            <VisualState x:Name="Normal" />
                                            <VisualState x:Name="MouseOver" />
                                            <VisualState x:Name="Disabled">
                                                <Storyboard>
                                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox"  Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                                        <EasingColorKeyFrame KeyTime="0"/>
                                                    </ColorAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>
                                        </VisualStateGroup>
                                        <VisualStateGroup x:Name="EditStates">
                                            <VisualState x:Name="Editable">
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="PART_EditableTextBox">
                                                        <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                                    </ObjectAnimationUsingKeyFrames>
                                                    <ObjectAnimationUsingKeyFrames  Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                                    </ObjectAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Uneditable" />
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>

                                    <Grid >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="20"  />
                                            <ColumnDefinition Width="5" />
                                        </Grid.ColumnDefinitions>

                                        <ContentPresenter x:Name="ContentSite" Grid.Column="0"
                            IsHitTestVisible="False"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"/>

                                        <ToggleButton x:Name="ToggleButton" Template="{StaticResource CustomButton}" Grid.Column="1" Focusable="false" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Grid>
                                    
                                    <Popup x:Name="PART_Popup" Focusable="False" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" PopupAnimation="Slide">
                                        <Border  Width="{TemplateBinding ActualWidth}"  TextBlock.LineHeight="25" Padding="4,0" CornerRadius="10" x:Name="DropDownBorder" BorderThickness="0" Background="{StaticResource Foreground}">
                                            <Grid x:Name="DropDown"  SnapsToDevicePixels="True"  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                                <ScrollViewer Style="{StaticResource CustoScrollviewer}"  SnapsToDevicePixels="True">
                                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                                </ScrollViewer>
                                            </Grid>
                                        </Border>

                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems"    Value="false">
                                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="0" />
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll"  Value="false" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CustoTabItem"  TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid>
                                <Border Name="Border" BorderThickness="2,2,2,0" Background="{StaticResource Foreground}" BorderBrush="Black" CornerRadius="6,6,0,0" >
                                    <ContentControl Foreground="Black" x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" Content="{TemplateBinding Header}" Margin="12,2,12,2"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource Background}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Foreground}" />
                                    <Setter TargetName="ContentSite" Property="Foreground" Value="{StaticResource Foreground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="CustoTabControl" TargetType="{x:Type TabControl}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabControl}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <TabPanel   Grid.Row="0" Panel.ZIndex="1"   Margin="0,0,4,-2"  IsItemsHost="True"  Background="Transparent" />
                                <Border  Grid.Row="1" BorderThickness="2" BorderBrush="{StaticResource Foreground}" CornerRadius="0, 12, 12, 12" Background="{StaticResource Background}">
                                    <ContentPresenter ContentSource="SelectedContent" />
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CustoBorder" TargetType="{x:Type Border}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="CornerRadius" Value="5"/>
                <Setter Property="Background" Value="{StaticResource Foreground}"/>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="WhiteSmoke"/>
                    </Trigger>
                </Style.Triggers>
            </Style>


            <DataTemplate x:Key="DiscItemImage">
                <Viewbox ContextMenuService.HorizontalOffset="-60" ContextMenuService.VerticalOffset="-60" ContextMenuService.Placement="MousePoint" ContextMenu="{StaticResource AlbumContextMenu}">
                     <ContentControl Opacity="{p:PyBinding FallbackValue=1, IsAsync=True, Script=StateToOpacity($[.State])}" Content="{Binding }"   Height="250" Width="250" x:Name="DiscImage">
                        <ContentControl.Style>
                            <Style TargetType="ContentControl">
                                <Setter Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect BlurRadius="15" ShadowDepth="30" Opacity="0.75" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="ContentTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <Image my:MouseOverArdorner.AttachedAdorner="{StaticResource MouseOverArdornerAlbumInfo3}" Stretch="Uniform" Source="{Binding Path=CoverImage, Mode=OneWay}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content.CoverImage}" Value="{x:Null}">
                                        <DataTrigger.Setters>
                                            <Setter Property="ContentTemplate" Value="{StaticResource FallBackImage3}"/>
                                        </DataTrigger.Setters>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                </Viewbox>
            </DataTemplate>

            <DataTemplate x:Key="DiscItemImageRigth">
                <Viewbox ContextMenuService.HorizontalOffset="-60" ContextMenuService.VerticalOffset="-60" ContextMenuService.Placement="MousePoint" ContextMenu="{StaticResource AlbumContextMenu}">
                    <ContentControl Content="{Binding }" Opacity="{p:PyBinding FallbackValue=1, IsAsync=True,  Script=StateToOpacity($[.State])}"  Height="250" Width="250" x:Name="DiscImage">
                        <ContentControl.Style>
                            <Style TargetType="ContentControl">
                                <Setter Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect BlurRadius="15" ShadowDepth="30" Opacity="0.75" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="ContentTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <Image HorizontalAlignment="Right" my:MouseOverArdorner.AttachedAdorner="{StaticResource MouseOverArdornerAlbumInfo3}" Stretch="Uniform" Source="{Binding Path=CoverImage, Mode=OneWay}" VerticalAlignment="Center"  />
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content.CoverImage, Mode=OneWay}" Value="{x:Null}">
                                        <DataTrigger.Setters>
                                            <Setter Property="ContentTemplate" Value="{StaticResource FallBackImage3}"/>
                                        </DataTrigger.Setters>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                </Viewbox>
            </DataTemplate>

            <Style x:Key="AlbumPresented" TargetType="MenuItem" BasedOn="{StaticResource IconMenuItem}">

                <Setter Property="CommandParameter" Value="{p:PyBinding Script=ExtendedAlbums($[.]\,$[{FindAncestor[MusicCollectionWPF.UserControls.AlbumPresenter.IAlbumPresenter]}])}"  >
                </Setter>

                <Setter Property="Visibility" Value="{p:PyBinding Script=ContextMenuVisibility($[{Self}.Command]\,$[{FindAncestor[MusicCollectionWPF.UserControls.AlbumPresenter.IAlbumPresenter]}]\,$[{Self}.CommandParameter])}" >
                </Setter>
                <Setter Property="TextBlock.FontSize" Value="16" />
            </Style>



            <Style x:Key="AlbumPresented2" TargetType="MenuItem" BasedOn="{StaticResource CMenuItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="CommandParameter" Value="{p:PyBinding Script=ExtendedAlbums($[.]\,$[{FindAncestor[MusicCollectionWPF.UserControls.AlbumPresenter.IAlbumPresenter]}])}"  >
                </Setter>

                <Setter Property="TextBlock.FontSize" Value="16" />
            </Style>

            <!--Region Circular Context-->
            <CombinedGeometry   x:Key="MyButtonr" GeometryCombineMode="Union">
                <CombinedGeometry.Transform>
                    <TranslateTransform Y="-150" />
                </CombinedGeometry.Transform>
                <CombinedGeometry.Geometry1>
                    <EllipseGeometry Center="120,120" RadiusX="100" RadiusY="100"/>
                </CombinedGeometry.Geometry1>
                <CombinedGeometry.Geometry2>
                    <PathGeometry>
                        <PathGeometry.Figures>
                            <PathFigureCollection>
                                <PathFigure IsFilled="True" IsClosed="True" StartPoint="140,30">
                                    <PathFigure.Segments>
                                        <PathSegmentCollection>
                                            <LineSegment Point="120,0" IsSmoothJoin="True" />
                                            <LineSegment Point="100,30" IsSmoothJoin="True" />
                                        </PathSegmentCollection>
                                    </PathFigure.Segments>
                                </PathFigure>
                            </PathFigureCollection>
                        </PathGeometry.Figures>
                    </PathGeometry>
                </CombinedGeometry.Geometry2>
            </CombinedGeometry>


            <Style x:Key="Circular" TargetType="{x:Type MenuItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="CommandTarget" >
                    <Setter.Value>
                        <Binding RelativeSource="{RelativeSource AncestorType=ContextMenu}" Path="PlacementTarget"/>
                    </Setter.Value>
                </Setter>

                <Setter Property="Behaviour:CircularContextMenuItemBehaviour.IsCircular" Value="True" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}" >
                            <Grid>
                                <my:PieSliceDecorator x:Name="Pie" BigRay="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=(CustoPanel:SimpleCirclePanel.ListBoxExternalRay)}" SmallRay="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=(CustoPanel:SimpleCirclePanel.ListBoxInternallRay)}" Angle="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(CustoPanel:SimpleCirclePanel.AllocatedAngle)}" Background="Transparent"  ChildrenSize="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=(CustoPanel:SimpleCirclePanel.ChildrenSize)}"  BorderThickness="1" BorderBrush="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Foreground}"  >
                                    <StackPanel>
                                        <Image Height="6" Visibility="Hidden" x:Name="More" Source="{StaticResource flUp}"/>
                                        <!--LayoutTransformOrigin="0.5,0.5"-->
                                        <ContentPresenter x:Name="Icon"  ContentSource="Icon">
                                            <ContentPresenter.LayoutTransform>
                                                <RotateTransform Angle="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(CustoPanel:SimpleCirclePanel.DecalAngle)}"  />
                                            </ContentPresenter.LayoutTransform>
                                        </ContentPresenter>
                                    </StackPanel>

                                </my:PieSliceDecorator>

                                <Popup RenderTransformOrigin="0.5,0.5" x:Name="SubMenuPopup" VerticalOffset="-40" IsOpen="False" AllowsTransparency="True" Placement="Center" PlacementTarget="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Panel}}" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Popup.RenderTransform>
                                        <RotateTransform Angle="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(CustoPanel:SimpleCirclePanel.DecalAngle)}"  />
                                    </Popup.RenderTransform>
                                    <Grid x:Name="SubMenuPopupGrid" Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Height}" Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Width}" >
                                        <Ellipse Margin="10" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Background}" Stretch="Uniform" />
                                        <CustoPanel:SimpleCirclePanel  ExternalRay="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=(CustoPanel:SimpleCirclePanel.ListBoxExternalRay)}" x:Name="CP" KeyboardNavigation.DirectionalNavigation="Cycle" ClipToBounds="False"  IsItemsHost="True" />
                                        <!--Width="{p:PyBinding  Script=$[{FindAncestor[System.Windows.Controls.ContextMenu]}.(CustoPanel:SimpleCirclePanel.ListBoxInternallRay)]*2}" Height="{p:PyBinding  Script=$[{FindAncestor[System.Windows.Controls.ContextMenu]}.(CustoPanel:SimpleCirclePanel.ListBoxInternallRay)]*2.2}"-->
                                        <Path Margin="0,-6,0,0" Stroke="Blue" StrokeThickness="20"  x:Name="Wheel"  RenderTransformOrigin="0.5,0.55" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform"  Data="{StaticResource MyButtonr}">
                                            <Path.Width>
                                                <p:PyBinding Script="var_0*2">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}" Path="(CustoPanel:SimpleCirclePanel.ListBoxInternallRay)"/>
                                                </p:PyBinding>
                                            </Path.Width>
                                            <Path.Height>
                                                <p:PyBinding Script="var_0*2.2">
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}" Path="(CustoPanel:SimpleCirclePanel.ListBoxInternallRay)"/>
                                                </p:PyBinding>
                                            </Path.Height>
                                            <Path.RenderTransform>
                                                <RotateTransform Angle="0" />
                                            </Path.RenderTransform>
                                        </Path>
                                        <Viewbox Margin="5,0">
                                            <ContentPresenter TextBlock.Foreground="Black"  IsHitTestVisible="False" x:Name="OldHeaderPlace" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                        </Viewbox >
                                        <Viewbox Margin="5,0" >
                                            <ContentPresenter TextBlock.Foreground="Black"  IsHitTestVisible="False" x:Name="CurrentHeaderPlace" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                        </Viewbox>
                                    </Grid>
                                </Popup>
                            </Grid>

                            <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                            <ControlTemplate.Triggers>
                                <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter TargetName="More" Property="Visibility" Value="Visible"/>
                                </Trigger>

                                <!-- Role = SubMenuItem :this is a child menu item which does not have children -->
                                <Trigger Property="Role" Value="SubMenuHeader">
                                    <Setter TargetName="More" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                                </Trigger>

                                <!-- If no Icon is present the we collapse the Icon Content -->
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                <!-- The GlyphPanel contains the CheckMark -->
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="Gray"/>
                                    <Setter Property="FontStyle" Value="Italic"/>
                                    <Setter TargetName="Pie"  Property="Background" Value="LightGray"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="true">
                                    <Setter Property="FontStyle" Value="Normal"/>
                                </Trigger>

                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter TargetName="Pie" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Foreground}"/>
                                </Trigger>

                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="Pie"  Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Foreground}"/>
                                </Trigger>

                                <Trigger Property="IsSubmenuOpen" Value="True">
                                    <Setter TargetName="SubMenuPopup" Property="IsOpen" Value="True" />
                                    <Setter TargetName="Pie"  Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}, Path=Foreground}"/>


                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard Storyboard.TargetName="SubMenuPopupGrid" Storyboard.TargetProperty="Opacity">
                                                <DoubleAnimation From="0" To="1" Duration="0:0:0.4" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>


                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CircularContextMenu" TargetType="{x:Type ContextMenu}">
                <Style.Resources>
                    <Style BasedOn="{StaticResource Circular}" TargetType="{x:Type MenuItem}">
                    </Style>
                </Style.Resources>

                <Setter Property="Opacity" Value="0"/>

                <Setter Property="DataContext" Value="{Binding RelativeSource={RelativeSource self}, Path=PlacementTarget.DataContext}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="Black" Opacity="0.9" />
                    </Setter.Value>
                </Setter>

                <Setter Property="OverridesDefaultStyle" Value="True"/>

                <Setter Property="CustoPanel:SimpleCirclePanel.ListBoxInternallRay" Value="18"/>
                <Setter Property="CustoPanel:SimpleCirclePanel.ListBoxExternalRay" Value="50"/>
                <Setter Property="CustoPanel:SimpleCirclePanel.ChildrenSize" Value="30"/>
                <Setter Property="Height" Value="120"/>
                <Setter Property="Width" Value="120"/>


                <Setter Property="TextBlock.FontWeight" Value="Bold"/>
                <Setter Property="TextBlock.Foreground" Value="Black"/>
                <Setter Property="Foreground" Value="{StaticResource Background2}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate  TargetType="{x:Type ContextMenu}">
                            <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"  >
                                <Ellipse Margin="10" Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" Stretch="Uniform" />
                                <CustoPanel:SimpleCirclePanel KeyboardNavigation.TabNavigation="Cycle" IsItemsHost="True" ExternalRay="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(CustoPanel:SimpleCirclePanel.ListBoxExternalRay)}" />
                                <Path Fill="{TemplateBinding Foreground}"   Margin="0,-4,0,0" RenderTransformOrigin="0.5,0.55"  x:Name="Wheel"  VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform"  Data="{StaticResource MyButtonr}" Stroke="Brown" StrokeThickness="1">
                                    <Path.Width>
                                        <p:PyBinding Script="var_0*2">
                                            <Binding RelativeSource="{RelativeSource Mode=TemplatedParent}" Path="(CustoPanel:SimpleCirclePanel.ListBoxInternallRay)"/>
                                        </p:PyBinding>
                                    </Path.Width>
                                    <Path.Height>
                                        <p:PyBinding Script="var_0*2.2">
                                            <Binding RelativeSource="{RelativeSource Mode=TemplatedParent}" Path="(CustoPanel:SimpleCirclePanel.ListBoxInternallRay)"/>
                                        </p:PyBinding>
                                    </Path.Height>
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="0" />
                                    </Path.RenderTransform>
                                </Path>
                                <Viewbox MaxHeight="15" Margin="45,0" VerticalAlignment="Center">
                                    <ContentPresenter TextBlock.Foreground="Black"  IsHitTestVisible="False" x:Name="OldHeaderPlace" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Viewbox>
                                <Viewbox MaxHeight="15" Margin="45,0" VerticalAlignment="Center">
                                    <ContentPresenter  TextBlock.Foreground="Black" IsHitTestVisible="False" x:Name="CurrentHeaderPlace" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Viewbox>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsOpen" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard Name="OpenAnim">
                                <Storyboard Storyboard.TargetProperty="Opacity">
                                    <DoubleAnimationUsingKeyFrames Duration="0:0:0.85">
                                        <DiscreteDoubleKeyFrame Value="0" KeyTime="0:0:0" />
                                        <DiscreteDoubleKeyFrame Value="0" KeyTime="0:0:0.25" />
                                        <LinearDoubleKeyFrame  Value="1" KeyTime="0:0:0.75" />
                                    </DoubleAnimationUsingKeyFrames>

                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="OpenAnim"/>
                            <!--<BeginStoryboard Name="CloseAnim">
                                <Storyboard BeginTime="0:0:0.5" Storyboard.TargetProperty="Opacity">
                                    <DoubleAnimation To="0" Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>-->
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--End Region Circular Context CircularContextMenuItem  -->

            <Style x:Key="AlbumPresentedMenuItem" TargetType="MenuItem" BasedOn="{StaticResource Circular}">

                <Setter Property="CommandParameter" Value="{p:PyBinding Script=ExtendedAlbums($[.]\,$[{FindAncestor[MusicCollectionWPF.UserControls.AlbumPresenter.IAlbumPresenter]}])}"  >
                </Setter>

                <Setter Property="Visibility" Value="{p:PyBinding Script=ContextMenuVisibility($[{Self}.Command]\,$[{FindAncestor[MusicCollectionWPF.UserControls.AlbumPresenter.IAlbumPresenter]}]\,$[{Self}.CommandParameter])}" >
                </Setter>
                <Setter Property="TextBlock.FontSize" Value="16" />
            </Style>

            <ContextMenu Placement="Mouse" x:Shared="False" ContextMenuService.HorizontalOffset="-60" ContextMenuService.VerticalOffset="-60" x:Key="AlbumContextMenu" Style="{StaticResource CircularContextMenu}" ItemContainerStyle="{StaticResource AlbumPresentedMenuItem}">
               
                <MenuItem Header="Edit" Command="my:MusicCollectionCommands.Edit">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Edit}"/>
                    </MenuItem.Icon>
                </MenuItem> 
                <MenuItem Header="Play" Command="Play" >
                    <MenuItem.Icon>
                        <Image Source="{StaticResource PlayNow}" />
                    </MenuItem.Icon>
                </MenuItem>
                <!--<MenuItem Header="Maturity" TextBlock.FontSize="16">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource Maturity}" Width="30" Height="30"/>
                                </MenuItem.Icon>
                                <MenuItem DataContext="{Binding RelativeSource={RelativeSource AncestorType=MenuItem},Path=DataContext}" Header="Discover" TextBlock.FontSize="16" IsCheckable="True" Style="{StaticResource CMenuItem}"   IsChecked="{p:PyBinding Script=$[.Maturity]\=\=AlbumMaturity.Discover,ScriptBack=AlbumMaturity.Discover if (var_0\=\=True) else None}" IsEnabled="{p:PyBinding Script=not($[{Self}.IsChecked])}"/>
                                <MenuItem DataContext="{Binding RelativeSource={RelativeSource AncestorType=MenuItem},Path=DataContext}" Header="Collection" TextBlock.FontSize="16" IsCheckable="True" Style="{StaticResource CMenuItem}" IsChecked="{p:PyBinding Script=$[.Maturity]\=\=AlbumMaturity.Collection,ScriptBack=AlbumMaturity.Collection if (var_0\=\=True) else None}" IsEnabled="{p:PyBinding Script=not($[{Self}.IsChecked])}"/>
                            </MenuItem>-->
                <MenuItem Header="Move" Command="my:MusicCollectionCommands.Move">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Move}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Delete"  Command="my:MusicCollectionCommands.Delete">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource Delete}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Export" Command="my:MusicCollectionCommands.Export">
                    <MenuItem.Icon>
                        <Image Source="{StaticResource CopyToDisk}"/>
                    </MenuItem.Icon>
                </MenuItem>
            </ContextMenu>


            <Style x:Key="TextPresenter" TargetType="ContentControl">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock  MaxWidth="{TemplateBinding MaxWidth}" Text="{TemplateBinding Content}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"></TextBlock>
                        </DataTemplate>

                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Value="true">
                        <DataTrigger.Binding>
                            <p:PyBinding Script="ComplexityIsNeeded($[{Self}.Content],$[{Self}.FontFamily],$[{Self}.FontStyle],$[{Self}.FontWeight],$[{Self}.FontStretch],$[{Self}.FontSize],$[{Self}.ActualWidth],$[{Self}.MaxWidth])" />

                        </DataTrigger.Binding>
                        <DataTrigger.Setters>
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <userinfra:SlidingText Width="{TemplateBinding Width}" MaxWidth="{TemplateBinding MaxWidth}"  Text="{TemplateBinding Content}" Height="{TemplateBinding Height}"   Margin="{TemplateBinding Margin}">
                                        </userinfra:SlidingText>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger.Setters>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <DataTemplate x:Key="ArtistTemplate">
                <Border CornerRadius="5"  BorderBrush="Transparent" Background="Transparent" x:Name="Presenter">
                    <Grid Height="40">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="60" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <userinfra:SlidingText TextBlock.FontWeight="Bold"  Height="15" x:Name="TextA" Text="{p:PyBinding Script=ArtistDisplay($[.])}"   Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center"  Foreground="{StaticResource Foreground}" infraUser:SlidingText.Blank="50" />

                         <Image Grid.Column="0" Height="40" Width="40" VerticalAlignment="Center"  HorizontalAlignment="Center" >
                            <Image.Source>
                                <p:PyBinding  TargetNullValue="{StaticResource UnknownCD}" Script="CoverFromList($[.Albums])" Mode="OneWay"/>
                            </Image.Source>
                        </Image>
                    </Grid>
                </Border>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource= {RelativeSource Mode=FindAncestor, AncestorType= {x:Type ListBoxItem}},Path=IsSelected}" Value="True">
                        <Setter TargetName="Presenter" Property="Background" Value="{StaticResource Foreground}"></Setter>
                        <Setter TargetName="TextA" Property="Foreground" Value="Black"></Setter>
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="Presenter" Property="Background" Value="{StaticResource Foreground}"></Setter>
                        <Setter TargetName="TextA" Property="Foreground" Value="Black"></Setter>
                    </Trigger>
                </DataTemplate.Triggers>
            </DataTemplate>


            <DataTemplate x:Key="AlbumTemplate">
                  <Border CornerRadius="5"   BorderBrush="Transparent" Background="Transparent" x:Name="Presenter">
                    <Grid Height="40" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="60" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <userinfra:SlidingText TextBlock.FontWeight="Bold"  Height="15" x:Name="TextA" Text="{p:PyBinding Script=AlbumDisplay($[.])}"   Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center"  Foreground="{StaticResource Foreground}" infraUser:SlidingText.Blank="50" />
                     
                        <Image Grid.Column="0" Height="40" Width="40" VerticalAlignment="Center"  HorizontalAlignment="Center" Source="{Binding  Path=CoverImage,TargetNullValue={StaticResource UnknownCD},FallbackValue={StaticResource UnknownCD}, Mode=OneWay}"/>
                    </Grid>
                </Border>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource= {RelativeSource Mode=FindAncestor, AncestorType= {x:Type ListBoxItem}},Path=IsSelected}" Value="True">
                        <Setter TargetName="Presenter" Property="Background" Value="{StaticResource Foreground}"></Setter>
                        <Setter TargetName="TextA" Property="Foreground" Value="Black"></Setter>
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="Presenter" Property="Background" Value="{StaticResource LigthForeground}"></Setter>
                        <Setter TargetName="TextA" Property="Foreground" Value="Black"></Setter>
                    </Trigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="TrackTemplate">
                <Border CornerRadius="5" BorderBrush="Transparent" Background="Transparent" x:Name="Presenter">
                    <Grid Height="40">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="60" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <userinfra:SlidingText TextBlock.FontWeight="Bold"  Height="15" x:Name="TextA" Text="{p:PyBinding Script=TrackDisplay($[.])}"   Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center"  Foreground="{StaticResource Foreground}" infraUser:SlidingText.Blank="50" />
                        <Image Grid.Column="0" Height="40" Width="40" VerticalAlignment="Center"  HorizontalAlignment="Center" Source="{Binding  Path=Album.CoverImage,TargetNullValue={StaticResource UnknownCD},FallbackValue={StaticResource UnknownCD}, Mode=OneWay}"/>
                    </Grid>
                </Border>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource= {RelativeSource Mode=FindAncestor, AncestorType= {x:Type ListBoxItem}},Path=IsSelected}" Value="True">
                        <Setter TargetName="Presenter" Property="Background" Value="{StaticResource Foreground}"></Setter>
                        <Setter TargetName="TextA" Property="Foreground" Value="Black"></Setter>
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="Presenter" Property="Background" Value="{StaticResource LigthForeground}"/>
                        <Setter TargetName="TextA" Property="Foreground" Value="Black"></Setter>
                    </Trigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <userinfra:FoundItemTemplateSelector x:Key="FoundItemTemplateSelector" />


            <Style x:Key="AlbumList" TargetType="{x:Type ListBox}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ItemTemplateSelector" Value="{StaticResource FoundItemTemplateSelector}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer Style="{StaticResource CustoScrollviewer}"  x:Name="Scroller" VerticalAlignment="Bottom" Focusable="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Focusable="False" Panel.ZIndex="999"  />
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <CustoPanel:VerticalVirtualizingStackPanel ItemHeight="40"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style  x:Key="CustoScrollviewerSpecial" TargetType="ScrollViewer">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"  />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <ScrollContentPresenter  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  VerticalAlignment="Top"  ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"  Grid.Column="1" />

                                <RepeatButton Opacity="{p:PyBinding Script=0.0 if ($[{TemplatedParent}.HorizontalOffset]\=\=0) else 1.0}"  x:Name="LeftButton" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Margin="0,3" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" Width="15" Height="15" VerticalAlignment="Top"  Grid.Column="0" Style="{StaticResource ScrollBarLineButton2}" Command="ScrollBar.LineLeftCommand">
                                    <Image x:Name="LeftImage" Height="15" Width="15" Stretch="UniformToFill" Source="{StaticResource sLeft}"></Image>
                                </RepeatButton>

                                <RepeatButton Opacity="{p:PyBinding Script=0.0 if ($[{TemplatedParent}.HorizontalOffset]+$[{TemplatedParent}.ViewportWidth]\>\=$[{TemplatedParent}.ExtentWidth]) else 1.0}" x:Name="RightButton" Margin="0,3" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"  HorizontalContentAlignment="Center" VerticalContentAlignment="Top" Width="15" Height="15" VerticalAlignment="Top"  Grid.Column="2" Style="{StaticResource ScrollBarLineButton2}" Command="ScrollBar.LineRightCommand">
                                    <Image x:Name="RightImage"  Height="15" Width="15"  Stretch="UniformToFill"  Source="{StaticResource sRight}"></Image>
                                </RepeatButton>

                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="my:ScrollViewerAttribute.ArrowStyleSmall" Value="False">
                                    <Setter TargetName="LeftButton" Property="VerticalAlignment" Value="Center"/>
                                    <Setter TargetName="LeftButton" Property="Height" Value="25"/>
                                    <Setter TargetName="LeftButton" Property="Width" Value="25"/>
                                    <Setter TargetName="RightButton" Property="VerticalAlignment" Value="Center"/>
                                    <Setter TargetName="RightButton" Property="Height" Value="25"/>
                                    <Setter TargetName="RightButton" Property="Width" Value="25"/>
                                    <Setter TargetName="LeftImage" Property="Height" Value="25"/>
                                    <Setter TargetName="LeftImage" Property="Width" Value="25"/>
                                    <Setter TargetName="RightImage" Property="Height" Value="25"/>
                                    <Setter TargetName="RightImage" Property="Width" Value="25"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="LateralListBox" TargetType="{x:Type ListBox}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" my:ScrollViewerAttribute.ArrowStyleSmall="False"  CanContentScroll="True" Style="{StaticResource CustoScrollviewerSpecial}"  x:Name="Scroller" VerticalAlignment="Bottom" Focusable="False" VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Auto">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Focusable="False" Panel.ZIndex="999"  />
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style  x:Key="CustoScrollviewerSpecialHorinzontal" TargetType="ScrollViewer">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"  />
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <ScrollContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"  Grid.Row="1" />
                                <!--"Translate($[{TemplatedParent}.Value],$[{TemplatedParent}.Minimum],$[{Template-->
                                <!--Command="ScrollBar.LineUpCommand"-->
                                <RepeatButton Behaviour:ScrollViewerBehaviour.SmoothDown="-1"  Opacity="{p:PyBinding Script=0.0 if ($[{TemplatedParent}.VerticalOffset]\=\=0) else 1.0}"  x:Name="UpButton" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" HorizontalContentAlignment="Center" HorizontalAlignment="Stretch" Height="25" VerticalAlignment="Center"  Grid.Row="0" Style="{StaticResource ScrollBarLineButton2}" >
                                    <Image x:Name="UpImage" Height="25" Width="25" Stretch="UniformToFill" Source="{StaticResource sUp}"></Image>
                                </RepeatButton>

                                <RepeatButton Behaviour:ScrollViewerBehaviour.SmoothDown="1"  Opacity="{p:PyBinding Script=0.0 if ($[{TemplatedParent}.VerticalOffset]+$[{TemplatedParent}.ViewportHeight]\>\=$[{TemplatedParent}.ExtentHeight]) else 1.0}" x:Name="DownButton" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" HorizontalContentAlignment="Center" HorizontalAlignment="Stretch" Height="25" VerticalAlignment="Center"  Grid.Row="2" Style="{StaticResource ScrollBarLineButton2}">
                                    <!--Command="ScrollBar.LineDownCommand">-->
                                    <Image x:Name="DownImage"  Height="25" Width="25"  Stretch="UniformToFill"  Source="{StaticResource sDown}"></Image>
                                </RepeatButton>

                            </Grid>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="LateralHorizontalListBox" TargetType="{x:Type ListBox}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer Style="{StaticResource CustoScrollviewerSpecialHorinzontal}"  x:Name="Scroller" VerticalAlignment="Bottom" Focusable="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Focusable="False" Panel.ZIndex="999"  />
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!--Button Slider-->

            <LineGeometry x:Key="ButtonGrid0" StartPoint="5,100" EndPoint="20,100">
                <LineGeometry.Transform>
                    <RotateTransform CenterX="100" CenterY="100" Angle="-45" />
                </LineGeometry.Transform>
            </LineGeometry>


            <LineGeometry x:Key="ButtonGrid1" StartPoint="5,100" EndPoint="20,100"/>

            <LineGeometry x:Key="ButtonGrid2" StartPoint="5,100" EndPoint="20,100">
                <LineGeometry.Transform>
                    <RotateTransform CenterX="100" CenterY="100" Angle="45" />
                </LineGeometry.Transform>
            </LineGeometry>

            <LineGeometry x:Key="ButtonGrid3" StartPoint="5,100" EndPoint="20,100">
                <LineGeometry.Transform>
                    <RotateTransform CenterX="100" CenterY="100" Angle="90" />
                </LineGeometry.Transform>
            </LineGeometry>

            <LineGeometry x:Key="ButtonGrid4" StartPoint="195,100" EndPoint="180,100">
                <LineGeometry.Transform>
                    <RotateTransform CenterX="100" CenterY="100" Angle="-45" />
                </LineGeometry.Transform>
            </LineGeometry>

            <LineGeometry x:Key="ButtonGrid5" StartPoint="195,100" EndPoint="180,100"/>

            <LineGeometry x:Key="ButtonGrid6" StartPoint="195,100" EndPoint="180,100">
                <LineGeometry.Transform>
                    <RotateTransform CenterX="100" CenterY="100" Angle="45" />
                </LineGeometry.Transform>
            </LineGeometry>




            <CombinedGeometry   x:Key="MyButton" GeometryCombineMode="Union">
                <CombinedGeometry.Transform>
                    <TranslateTransform Y="-150" />
                </CombinedGeometry.Transform>
                <CombinedGeometry.Geometry1>
                    <CombinedGeometry GeometryCombineMode="Exclude">
                        <CombinedGeometry.Geometry1>
                            <EllipseGeometry Center="120,120" RadiusX="100" RadiusY="100"/>
                        </CombinedGeometry.Geometry1>
                        <CombinedGeometry.Geometry2>
                            <EllipseGeometry Center="120,60" RadiusX="20" RadiusY="20"/>
                        </CombinedGeometry.Geometry2>
                    </CombinedGeometry>
                </CombinedGeometry.Geometry1>
                <CombinedGeometry.Geometry2>
                    <PathGeometry>
                        <PathGeometry.Figures>
                            <PathFigureCollection>
                                <PathFigure IsFilled="True" IsClosed="True" StartPoint="140,30">
                                    <PathFigure.Segments>
                                        <PathSegmentCollection>
                                            <LineSegment Point="120,0" />
                                            <LineSegment Point="100,30" />
                                        </PathSegmentCollection>
                                    </PathFigure.Segments>
                                </PathFigure>
                            </PathFigureCollection>
                        </PathGeometry.Figures>
                    </PathGeometry>
                </CombinedGeometry.Geometry2>
            </CombinedGeometry>

            <Style x:Key="VolumeButtonSlider" TargetType="{x:Type my:VolumeSlider}">
                <Setter Property="Ratio" Value="{p:PyBinding Script=($[{Self}.Value]-$[{Self}.Minimum])/($[{Self}.Maximum]-$[{Self}.Minimum]) }" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Slider">
                            <Viewbox>
                                <Grid Background="Transparent"  Height="200" Width="200" x:Name="MotherGrid">

                                    <Path Height="200" x:Name="G0" Width="200" Data="{StaticResource ButtonGrid0}" Stretch="None"  Stroke="{StaticResource IconBrush}" StrokeThickness="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>

                                    <Path Height="200" x:Name="G1" Width="200" Data="{StaticResource ButtonGrid1}" Stretch="None"  Stroke="{StaticResource IconBrush}" StrokeThickness="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>

                                    <Path Height="200"  x:Name="G2" Width="200" Data="{StaticResource ButtonGrid2}" Stretch="None"  Stroke="{StaticResource IconBrush}" StrokeThickness="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>

                                    <Path Height="200"  x:Name="G3" Width="200" Data="{StaticResource ButtonGrid3}" Stretch="None"  Stroke="{StaticResource IconBrush}" StrokeThickness="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>

                                    <Path Height="200"  x:Name="G4" Width="200" Data="{StaticResource ButtonGrid4}" Stretch="None"  Stroke="{StaticResource IconBrush}" StrokeThickness="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>

                                    <Path Height="200" x:Name="G5"  Width="200" Data="{StaticResource ButtonGrid5}" Stretch="None"  Stroke="{StaticResource IconBrush}" StrokeThickness="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>

                                    <Path Height="200" x:Name="G6" Width="200" Data="{StaticResource ButtonGrid6}" Stretch="None"  Stroke="{StaticResource IconBrush}" StrokeThickness="3" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>

                                    <Path x:Name="Potar" Height="132" Width="120" Fill="{StaticResource IconBrush}" RenderTransformOrigin="0.5,0.55" Data="{StaticResource MyButton}"  Stretch="Fill" VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <RotateTransform x:Name="RT" Angle="{p:PyBinding UnsetValueIsInvalid=True, Script=$[{TemplatedParent}.Ratio]*270-135}" />
                                                <TranslateTransform Y="-7"/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>

                                </Grid>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{p:PyBinding Script=$[{Self}.Ratio]>0}" >
                                    <DataTrigger.Setters>
                                        <Setter TargetName="G0" Property="StrokeThickness" Value="15"/>
                                        <Setter TargetName="G0" Property="Stroke" Value="{StaticResource Background2}"/>
                                        <Setter TargetName="G0" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect Radius="8"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>

                                <DataTrigger Value="True" Binding="{p:PyBinding Script=$[{Self}.Ratio]>\=0.167}" >
                                    <DataTrigger.Setters>
                                        <Setter TargetName="G1" Property="StrokeThickness" Value="15"/>
                                        <Setter TargetName="G1" Property="Stroke" Value="{StaticResource Background2}"/>
                                        <Setter TargetName="G1" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect Radius="8"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>

                                <DataTrigger Value="True" Binding="{p:PyBinding Script=$[{Self}.Ratio]>\=0.333}" >
                                    <DataTrigger.Setters>
                                        <Setter TargetName="G2" Property="StrokeThickness" Value="15"/>
                                        <Setter TargetName="G2" Property="Stroke" Value="{StaticResource Background2}"/>
                                        <Setter TargetName="G2" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect Radius="8"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>

                                <DataTrigger Value="True" Binding="{p:PyBinding Script=$[{Self}.Ratio]>\=0.5}" >
                                    <DataTrigger.Setters>
                                        <Setter TargetName="G3" Property="StrokeThickness" Value="15"/>
                                        <Setter TargetName="G3" Property="Stroke" Value="{StaticResource Background2}"/>
                                        <Setter TargetName="G3" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect Radius="8"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>


                                <DataTrigger Value="True" Binding="{p:PyBinding Script=$[{Self}.Ratio]>\=0.667}" >
                                    <DataTrigger.Setters>
                                        <Setter TargetName="G4" Property="StrokeThickness" Value="15"/>
                                        <Setter TargetName="G4" Property="Stroke" Value="{StaticResource Background2}"/>
                                        <Setter TargetName="G4" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect Radius="8"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>


                                <DataTrigger Value="True" Binding="{p:PyBinding Script=$[{Self}.Ratio]>\=0.833}" >
                                    <DataTrigger.Setters>
                                        <Setter TargetName="G5" Property="StrokeThickness" Value="15"/>
                                        <Setter TargetName="G5" Property="Stroke" Value="{StaticResource Background2}"/>
                                        <Setter TargetName="G5" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect Radius="8"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>


                                <DataTrigger Value="True" Binding="{p:PyBinding Script=$[{Self}.Ratio]\=\=1}" >
                                    <DataTrigger.Setters>
                                        <Setter TargetName="G6" Property="StrokeThickness" Value="15"/>
                                        <Setter TargetName="G6" Property="Stroke" Value="{StaticResource Background2}"/>
                                        <Setter TargetName="G6" Property="Effect">
                                            <Setter.Value>
                                                <BlurEffect Radius="8"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CustoSlideCheckBox" TargetType="my:SlidingCheckBox">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ForegroundNoneCheckedColor" Value ="{StaticResource Foreground}"/>
                <Setter Property="ForegroundCheckedColor" Value ="Black"/>
                <Setter Property="NoneCheckedColor" Value ="{StaticResource Background}"/>
                <Setter Property="CheckedColor" Value ="{StaticResource Foreground}"/>
                <Setter Property="TextBlock.FontWeight" Value ="Bold"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="my:SlidingCheckBox">
                            <Border CornerRadius="12"  x:Name="VBorder" ClipToBounds="True" Background="Transparent" Height="25" Width="{p:PyBinding Script=$[B1.ActualWidth]+13.5}" >
                                <Border.Clip>
                                    <p:PyBinding UnsetValueIsInvalid="True" Script="BorderClip($[{Self}.ActualWidth],$[{Self}.ActualHeight],$[{Self}.CornerRadius])" />
                                </Border.Clip>

                                <Canvas  Background="Transparent" Height="25" HorizontalAlignment="Left"  Width="{Binding ElementName=Wthing,Path=ActualWidth}">
                                    <Grid  x:Name="Wthing" Height="25" >
                                        <Grid.RenderTransform>
                                            <TranslateTransform x:Name="Transf"/>
                                        </Grid.RenderTransform>
                                        <Grid.ColumnDefinitions>

                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Border Width="{p:PyBinding Script=MaxText($[off]\,$[on])+40}" HorizontalAlignment="Stretch" x:Name="B1" Height="25" Grid.Column="0" Background="{TemplateBinding NoneCheckedColor}">
                                            <TextBlock HorizontalAlignment="Stretch" Margin="20,0,20,0" VerticalAlignment="Center"  x:Name="off" Foreground="{TemplateBinding ForegroundNoneCheckedColor}" Text="{TemplateBinding NoneCheckedText}"/>
                                        </Border>
                                        <Image HorizontalAlignment="Center" x:Name="GB" VerticalAlignment="Center" Panel.ZIndex="2" Grid.Column="0" Grid.ColumnSpan="2"  Height="27" Width="27" Source="{StaticResource GoldenB}"  />
                                        <Border Width="{p:PyBinding Script=MaxText($[off]\,$[on])+40}" HorizontalAlignment="Stretch"  x:Name="B2"  Height="25" Grid.Column="2"  Background="{TemplateBinding CheckedColor}"  >
                                            <TextBlock HorizontalAlignment="Stretch" Margin="20,0,20,0" x:Name="on" VerticalAlignment="Center" Foreground="{TemplateBinding ForegroundCheckedColor}"   Text="{TemplateBinding CheckedText}" />
                                        </Border>
                                    </Grid>

                                </Canvas>

                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="WebMatch_IFullAlbumDescriptor_ListBox" TargetType="ListBox">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid Background="Transparent" Width="490" x:Name="albumDescriptorDisplayer1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="420" />
                                    <ColumnDefinition Width="70" />
                                </Grid.ColumnDefinitions>
                                <infraUser:AlbumDescriptorDisplayer HorizontalAlignment="Stretch"  Grid.Column="0" DataContext="{Binding Path=FindItem}" Foreground="Black"  Background="Transparent"/>
                                <Image  Stretch="Uniform" Height="70" Width="70" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1">
                                    <Image.Source>
                                        <p:PyBinding UnsetValueIsInvalid="True" Script="StaticResource($[Root],$[.WebProvider])"/>
                                    </Image.Source>
                                </Image>
                            </Grid>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border x:Name="BB"  CornerRadius="5">
                                            <ContentPresenter   x:Name="Presenter"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Trigger.Setters>
                                                    <Setter TargetName="BB" Property="Background" Value="{StaticResource Foreground}"/>
                                                    <Setter TargetName="Presenter" Property="TextBlock.Foreground" Value="Black"/>
                                                </Trigger.Setters>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>

                        <ControlTemplate>
                            <ScrollViewer Style="{StaticResource CustoScrollviewer}" x:Name="Scroller"  Focusable="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <CustoPanel:VerticalVirtualizingStackPanel ItemHeight="100"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

</ResourceDictionary>